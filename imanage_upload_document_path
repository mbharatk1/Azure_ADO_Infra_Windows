<#  
    Purpose:  
    This PowerShell script uploads a document to the "Documents" folder within a specific Matter workspace in iManage Work.  
    It authenticates using OAuth2, retrieves an access token, locates the correct workspace and folder, and uploads the file.  
    The script includes error handling and logging to track each step.  

    Steps:
    1. Authenticate with iManage Work using OAuth2 and retrieve an access token.
    2. Find the correct workspace (e.g., "Matter 1" or "Matter 2") inside the Matter Class "CH - Compliance".
    3. Locate the "Documents" folder within the selected workspace.
    4. Upload the document to the identified folder, attaching comments.
    5. Log each step for debugging and tracking execution.

#>

# Define variables
$workServer = "your-imanage-instance.com"
$oauthUri = "https://$workServer/auth/oauth2/token"
$customerId = "1"
$libraryId = "CH"
$matterId = "ID-1"
$workspaceName = "Matter 1"  # Change to "Matter 2" if needed
$folderName = "Documents"
$filePath = "C:\FOLDER1\XXX"
$comments = "Uploading document to the Documents folder."

# Authentication credentials (Replace with actual values)
$clientId = "YOUR_CLIENT_ID"
$clientSecret = "YOUR_CLIENT_SECRET"
$username = "YOUR_USERNAME"
$password = "YOUR_PASSWORD"

# Log file location
$logFile = "C:\Logs\iManage_API_Log.txt"

# Function to log messages with timestamp
Function Write-Log {
    param ([string]$message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $logFile -Value "$timestamp - $message"
}

Write-Log "Starting script execution..."

# Step 1: Authenticate and retrieve OAuth Token
$authBody = @{
    "username"     = $username
    "password"     = $password
    "grant_type"   = "password"
    "client_id"    = $clientId
    "client_secret"= $clientSecret
    "scope"        = "admin"
}

try {
    Write-Log "Requesting OAuth Token..."
    $tokenResponse = Invoke-RestMethod -Uri $oauthUri -Method Post -Body $authBody -ContentType "application/x-www-form-urlencoded"
    $accessToken = $tokenResponse.access_token
    Write-Log "OAuth Token retrieved successfully."
}
catch {
    Write-Log "ERROR: Failed to retrieve OAuth Token - $_"
    Exit 1
}

# Step 2: Get workspace details
$workspaceUrl = "https://$workServer/work/api/v2/customers/$customerId/libraries/$libraryId/workspaces?name=$workspaceName"
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
}

try {
    Write-Log "Fetching workspace details..."
    $workspaceResponse = Invoke-RestMethod -Uri $workspaceUrl -Method Get -Headers $headers
    $workspaceId = $workspaceResponse.id
    Write-Log "Workspace ID retrieved: $workspaceId"
}
catch {
    Write-Log "ERROR: Failed to retrieve workspace details - $_"
    Exit 1
}

# Step 3: Get folder details for "Documents"
$folderUrl = "https://$workServer/work/api/v2/customers/$customerId/libraries/$libraryId/workspaces/$workspaceId/folders?name=$folderName"

try {
    Write-Log "Fetching folder details..."
    $folderResponse = Invoke-RestMethod -Uri $folderUrl -Method Get -Headers $headers
    $folderId = $folderResponse.id
    Write-Log "Folder ID retrieved: $folderId"
}
catch {
    Write-Log "ERROR: Failed to retrieve folder details - $_"
    Exit 1
}

# Step 4: Prepare and upload the document
$uploadUrl = "https://$workServer/work/api/v2/customers/$customerId/libraries/$libraryId/folders/$folderId/documents"
$uploadBody = @{
    "name" = "XXX"
    "comments" = $comments
}

try {
    Write-Log "Uploading document..."
    $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
    $encodedFile = [Convert]::ToBase64String($fileBytes)
    $uploadBody["file"] = $encodedFile

    $uploadResponse = Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers $headers -Body ($uploadBody | ConvertTo-Json) -ContentType "application/json"
    
    Write-Log "Document uploaded successfully."
    Write-Log "Response: $($uploadResponse)"
}
catch {
    Write-Log "ERROR: Failed to upload document - $_"
    Exit 1
}

Write-Log "Script execution completed successfully."

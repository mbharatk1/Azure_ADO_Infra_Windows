BEGIN TRANSACTION;

-- Step 1: Insert concatenated data into doc_id_comments (avoiding duplicates)
INSERT INTO doc_id_comments (cs_doc_id, iManageDocID, ConcatenatedData)
SELECT cs_doc_id, NULL, (SELECT STRING_AGG(CONCAT(COLUMN_NAME, ': ', CAST([COLUMN_NAME] AS NVARCHAR(MAX))), ', ') 
                         FROM INFORMATION_SCHEMA.COLUMNS 
                         WHERE TABLE_NAME = t.TableName AND COLUMN_NAME <> 'cs_doc_id'
                        FOR XML PATH(''))
FROM (SELECT DISTINCT TABLE_NAME AS TableName FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE') t
WHERE NOT EXISTS (
    SELECT 1 FROM doc_id_comments dc WHERE dc.cs_doc_id = t.TableName
);

-- Step 2: Update iManageDocID in doc_id_comments using data from XX
UPDATE doc_id_comments
SET doc_id_comments.iManageDocID = XX.iManageDocID
FROM doc_id_comments
INNER JOIN XX ON doc_id_comments.cs_doc_id = XX.cs_doc_id;

-- Commit transaction if all steps succeed
COMMIT TRANSACTION;




-- Generate column concatenation dynamically (excluding cs_doc_id)
    SELECT @ColumnList = STRING_AGG(''' | ' + COLUMN_NAME + ': '' + CAST([' + COLUMN_NAME + '] AS NVARCHAR(MAX))', ', ')
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName 
    AND COLUMN_NAME NOT IN ('cs_doc_id', 'Column2'); -- Excluding cs_doc_id

    -- Generate dynamic SQL for inserting concatenated data into doc_id_comments
    SET @SQL = 'INSERT INTO doc_id_comments (cs_doc_id, iManageDocID, ConcatenatedData)
                SELECT cs_doc_id, NULL, (SELECT ' + @ColumnList + ' FOR XML PATH('''')) FROM ' + @TableName;

    PRINT @SQL; -- Debugging step to verify the generated SQL

    EXEC sp_executesql @SQL;



DECLARE @TableName NVARCHAR(100), @SQL NVARCHAR(MAX), @ColumnList NVARCHAR(MAX);
DECLARE @Tables TABLE (TableName NVARCHAR(100));

-- Retrieve all table names dynamically
INSERT INTO @Tables (TableName)
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';

-- Iterate over each table
DECLARE TableCursor CURSOR FOR SELECT TableName FROM @Tables;
OPEN TableCursor;
FETCH NEXT FROM TableCursor INTO @TableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Generate column concatenation per row, including ID
    SET @ColumnList = '';
    SELECT @ColumnList = STRING_AGG(''' | ' + COLUMN_NAME + ': '' + CAST([' + COLUMN_NAME + '] AS NVARCHAR(MAX))', '') 
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME NOT IN ('Column2');

    -- Ensure correct SELECT structure and format the query
    SET @SQL = 'INSERT INTO X (ID, Column2, ConcatenatedData)
                SELECT ID, NULL, CONCAT(''ID: '', ID, '' | '', (SELECT ' + @ColumnList + ' FOR XML PATH(''''))) 
                FROM ' + @TableName;

    PRINT @SQL; -- Debugging: Check generated SQL before execution

    EXEC sp_executesql @SQL;

    FETCH NEXT FROM TableCursor INTO @TableName;
END;

CLOSE TableCursor;
DEALLOCATE TableCursor;

   -- Generate column concatenation dynamically
    SELECT @ColumnList = STRING_AGG(CONCAT(''' | ', COLUMN_NAME, ': ''', ' + CAST([' + COLUMN_NAME + '] AS NVARCHAR(MAX))'), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME <> 'ID';

    -- Generate column concatenation per row, including ID
    SELECT @ColumnList = STRING_AGG(CONCAT(COLUMN_NAME, ': ''', CAST([' + COLUMN_NAME + '] AS NVARCHAR(MAX)), ''''), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME <> 'Column2';

    -- Generate dynamic SQL to process each row separately
    SET @SQL = 'INSERT INTO X (ID, Column2, ConcatenatedData)
                SELECT ID, NULL, CONCAT(''ID: '', ID, '' | '', (SELECT ' + @ColumnList + ' FROM ' + @TableName + ' WHERE ' + @TableName + '.ID = X.ID FOR XML PATH(''''))) FROM ' + @TableName;


DECLARE @Tables TABLE (TableName NVARCHAR(100));

INSERT INTO @Tables (TableName)
SELECT TABLE_NAME 
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE';


CREATE TABLE X (
    ID INT PRIMARY KEY,
    Column2 NVARCHAR(MAX) NULL,
    ConcatenatedData NVARCHAR(MAX)
);


DECLARE @TableName NVARCHAR(100), @SQL NVARCHAR(MAX), @ColumnList NVARCHAR(MAX);
DECLARE @Tables TABLE (TableName NVARCHAR(100));
INSERT INTO @Tables VALUES ('Table1'), ('Table2'), ('Table3'), ('Table4'), ('Table5');

-- Iterate over each table
DECLARE TableCursor CURSOR FOR SELECT TableName FROM @Tables;
OPEN TableCursor;
FETCH NEXT FROM TableCursor INTO @TableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Generate column concatenation
    SELECT @ColumnList = STRING_AGG(''' | ' + COLUMN_NAME + ': '' + CAST([' + COLUMN_NAME + '] AS NVARCHAR(MAX))', '') 
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TableName AND COLUMN_NAME <> 'ID';

    -- Generate dynamic SQL for each table
    SET @SQL = 'INSERT INTO X (ID, Column2, ConcatenatedData)
                SELECT ID, NULL, (SELECT ' + @ColumnList + ' FROM ' + @TableName + ' FOR XML PATH('''')) FROM ' + @TableName;

    EXEC sp_executesql @SQL;
    
    FETCH NEXT FROM TableCursor INTO @TableName;
END;

CLOSE TableCursor;
DEALLOCATE TableCursor;


UPDATE ZZ
SET ZZ.value2 = X.ConcatenatedData
FROM ZZ
JOIN X ON ZZ.ID = X.ID;


